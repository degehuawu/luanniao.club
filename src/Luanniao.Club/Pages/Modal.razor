@layout MainLayout
@page "/modal"
@using LuanNiao.Blazor.Component.Antd.Modal;
@using LuanNiao.Blazor.Component.Antd.Button;
@using static LuanNiao.Blazor.Core.Translater
@using LuanNiao.Blazor.Component.Antd
@inject LuanNiao.Blazor.Component.Antd.Message message

<LNMessageStub></LNMessageStub>
<div class="box">
    <h3>Basic: Basic modal.</h3>
    <LNButton Type="LNButton.BType.Primary" OnClickCallback="(_)=>OnModalShow(1)">Open Modal</LNButton>
    <LNModal @ref="_m1" OnCancel="(_)=>OnCancel(1)"
             MaskClosable="false"
             OkText="sdfdsfd"
             OnOk="@OnOk">
        <Title>Hello, Basic Modal</Title>
        <ChildContent>
            <p>Some contents...</p>
            <p>Some contents...</p>
            <p>Some contents...</p>
        </ChildContent>
    </LNModal>
</div>
<div class="box">
    <h3>
        Asynchronously close:Asynchronously close a modal dialog when a the OK button is pressed. For example, you can use this pattern when you submit a form.
    </h3>
    <LNButton Type="LNButton.BType.Primary" OnClickCallback="(_)=>OnModalShow(2)">Open Modal</LNButton>

    <LNModal @ref="_m2" OnCancel="(_)=>OnCancel(2)"
             Mask="false"
             OnOk="@OnOk"
             ConfirmLoading="true">
        <Title>Hello, Basic Modal</Title>
        <ChildContent>
            <p>Some contents...</p>
            <p>Some contents...</p>
            <p>Some contents...</p>
        </ChildContent>
    </LNModal>
</div>


<div class="box">
    <h3>
        @Tr(e => e == "en" ? "Real project demo" : "一个实际项目的例子")
    </h3>
    <LNButton Type="LNButton.BType.Primary" OnClickCallback="(_)=>OnModalShow(3)">Open Modal</LNButton>

    <LNModal @ref="_m3" OnCancel="(_)=>OnCancel(3)"
             Mask="true"
             OnOk="@OnOk1"
             ConfirmLoading="true">
        <Title>Hello, Basic Modal</Title>
        <ChildContent>
            <p>Some contents...</p>
            <p>Some contents...</p>
            <p>Some contents...</p>
        </ChildContent>
    </LNModal>
</div>


@code{
    LNModal _m1;
    LNModal _m2;
    LNModal _m3;
    private void OnModalShow(int modal)
    {
        switch (modal)
        {
            case 1:
                this._m1.Show();
                break;
            case 2:
                this._m2.Show();
                break;
            case 3:
                this._m3.Show();
                break;
            default:
                break;
        }
        this.StateHasChanged();
    }
    private void OnCancel(int modal)
    {
        switch (modal)
        {
            case 1:
                this._m1.Hide();
                break;
            case 2:
                this._m2.Hide();
                break;
            case 3:
                this._m3.Hide();
                break;
        }
        this.StateHasChanged();
    }
    private void OnOk(LNModal instance)
    {
        this.StateHasChanged();
        Task.Run(async () =>
        {
            await Task.Delay(1000);
            instance.HideLoading();
        //instance.Hide();
        await InvokeAsync(() => StateHasChanged());

        });
    }

    private void OnOk1(LNModal instance)
    {
        this.StateHasChanged();
        Task.Run(async () =>
        {
            message.Show(new LuanNiao.Blazor.Component.Antd.Message.MessageItem()
            {
                Text = Tr(e => e == "en" ? "Begin download data" : "开始下载数据"),
                MessageType = LuanNiao.Blazor.Component.Antd.Message.MessageItemType.Loading,
                Duration = 1000
            });
            await Task.Delay(2000);
            message.Show(new LuanNiao.Blazor.Component.Antd.Message.MessageItem()
            {
                Text = Tr(e => e == "en" ? "Download completed" : "下载完毕"),
                MessageType = LuanNiao.Blazor.Component.Antd.Message.MessageItemType.Info,
                Duration = 1000
            });
            await Task.Delay(2000);
            message.Show(new LuanNiao.Blazor.Component.Antd.Message.MessageItem()
            {
                Text = Tr(e => e == "en" ? "Begin analysis data" : "开始分析数据"),
                MessageType = LuanNiao.Blazor.Component.Antd.Message.MessageItemType.Loading,
                Duration = 1000
            });
            await Task.Delay(2000);
            message.Show(new LuanNiao.Blazor.Component.Antd.Message.MessageItem()
            {
                Text = Tr(e => e == "en" ? "Completed" : "完成"),
                MessageType = LuanNiao.Blazor.Component.Antd.Message.MessageItemType.Success,
                Duration = 1000
            });
            await Task.Delay(1000);
            instance.HideLoading();
        //instance.Hide();
        await InvokeAsync(() => StateHasChanged());

        });
    }
}